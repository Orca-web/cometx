version: '3.8'

services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile.api.prod
    expose:
      - "4000"
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
    env_file:
      - ./.env
    volumes:
      - .:/src
    depends_on:
      - postgres

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: Dockerfile.frontend.prod
    environment:
      - NODE_ENV=production
      - NODE_PATH=/usr/src/frontend/src
      - HOST=0.0.0.0
      - VIRTUAL_HOST=frontend.local
    env_file:
      - ./.env
    depends_on:
      - api
    command: ["npm", "run", "start"]

  postgres:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=password
    env_file:
      ./.env
    volumes:
      - "db-data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"

  proxy:
    build: ./proxy
    restart: always
    ports:
      - 80
      - 443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy-tier

  letsencrypt-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy-tier
    depends_on:
      - proxy
volumes:
  db-data:
  certs:
  vhost.d:
  html:
networks:
  proxy-tier:
